<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Collection;
use Illuminate\Pagination\LengthAwarePaginator;

class ApiController extends Controller
{
    // Youtube Controller START
    public function crawlYoutube(Request $request)
    {
        $url = 'https://sad-crawler-v2-t6ysugl5ra-as.a.run.app/crawl/youtube';
        $data = ['video_id' => $request->video_id,];
        $response = Http::post($url, $data);

        if ($response->successful()) {
            $result = json_decode($response->getBody(), true);
            $crawlResult = $result['result'];

            return $this->sendToYoutubeModel($crawlResult);
        } else {
            return back()->with('error', 'Video Id not found');
        }
    }

    private function sendToYoutubeModel($data)
    {
        $mlUrl = 'https://sad-backend-v2-t6ysugl5ra-as.a.run.app/predict/youtube';
        $mlData = ['data' => $data];

        $mlModelResponse = Http::post($mlUrl, $mlData);

        if ($mlModelResponse->successful()) {
            $result = json_decode($mlModelResponse->getBody(), true);
            $youtubeResult = $result['predictions'];

            return view('pages/youtube-pages/youtube', [
                'youtube' => $youtubeResult,
            ]);
        } else {
            return back()->with('error', 'Prediction Failed. Respons');
        }
    }
    //Youtube Controller END---------------------------------------------------------------------------------------


    // Playstore Controller START
    public function crawlPlaystore(Request $request)
    {
        $packageName = $request->package_name;

        if (session()->has('playstoreData') && session('playstoreData')['package_name'] === $packageName) {
            $data = session('playstoreData');

            $crawlResult = $data['result'];
            $currentPage = Paginator::resolveCurrentPage('page');
            $perPage = 10;

            $paginatedPS = new LengthAwarePaginator(
                array_slice($crawlResult, ($currentPage - 1) * $perPage, $perPage),
                count($crawlResult),
                $perPage,
                $currentPage,
                ['path' => Paginator::resolveCurrentPath()]
            );

            return view('pages/playstore-pages/playstore', [
                'playstore' => $paginatedPS,
            ]);
        } else {
            $url = 'https://sad-crawler-v2-t6ysugl5ra-as.a.run.app/crawl/playstore';
            $data = ['package_name' => $request->package_name];
            $response = Http::post($url, $data);

            if ($response->successful()) {
                $result = json_decode($response->getBody(), true);
                $crawlResult = $result['result'];

                $mlData = $this->sendToPlaystoreModel($crawlResult);

                $mlResult = [
                    'package_name' => $packageName,
                    'result' => $mlData,
                ];

                return session()->put('playstoreData',  $mlResult);
            } else {
                return back()->with('error', 'Package Name not found');
            }
        }
    }

    private function sendToPlaystoreModel($data)
    {
        $mlUrl = 'https://sad-backend-v2-t6ysugl5ra-as.a.run.app/predict/playstore';
        $mlData = ['data' => $data];

        $mlModelResponse = Http::post($mlUrl, $mlData);

        if ($mlModelResponse->successful()) {
            $result = json_decode($mlModelResponse->getBody(), true);
            $playstoreResult = $result['predictions'];

            return $playstoreResult;
        } else {
            return back()->with('error', 'Prediction Failed');
        }
    }
    // Playstore Controller END---------------------------------------------------------------------------------------


    // News Controller START
    public function crawlNews()
    {
        if (session()->has('newsData')) {
            $data = session('newsData');
            $currentPage = Paginator::resolveCurrentPage('page');
            $perPage = 10;

            $paginatedNews = new LengthAwarePaginator(
                array_slice($data, ($currentPage - 1) * $perPage, $perPage),
                count($data),
                $perPage,
                $currentPage,
                ['path' => Paginator::resolveCurrentPath()]
            );

            return view('pages/news-pages/news', [
                'news' => $paginatedNews,
            ]);
        } else {
            $url = 'https://sad-crawler-v2-t6ysugl5ra-as.a.run.app/crawl/news';
            $response = Http::get($url);

            if ($response->successful()) {
                $result = json_decode($response->getBody(), true);
                $crawlResult = $result['result'];

                $mlData = $this->sendToNewsModel($crawlResult);

                return session(['newsData' => $mlData]);
            } else {
                return back()->with('error', 'Failed to crawl news');
            }
        }
    }
    private function sendToNewsModel($data)
    {
        $mlUrl = 'https://sad-backend-v2-t6ysugl5ra-as.a.run.app/predict/news';
        $mlData = ['data' => $data];

        $mlModelResponse = Http::post($mlUrl, $mlData);

        if ($mlModelResponse->successful()) {
            $result = json_decode($mlModelResponse->getBody(), true);
            $newsResult = $result['predictions'];

            return $newsResult;
        } else {
            return back()->with('error', 'Prediction Failed');
        }
    }
    // News Controller END---------------------------------------------------------------------------------------
}
